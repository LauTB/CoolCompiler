from abc import ABC
from cmp.parsing import ShiftReduceParser
from cmp.pycompiler import AttributeProduction, Sentence
from astnodes import *


class CoolParser(ShiftReduceParser, ABC):
    def __init__(self, G, verbose=False):
        self.G = G
        self.verbose = verbose
        self.action = self.__action_table()
        self.goto = self.__goto_table()

    def __action_table(self):
        G = self.G
        return {
            (0, G["class"]): ("SHIFT", 1),
            (1, G["type"]): ("SHIFT", 2),
            (2, G["inherits"]): ("SHIFT", 136),
            (2, G["{"]): ("SHIFT", 3),
            (3, G["id"]): ("SHIFT", 4),
            (3, G["}"]): ("REDUCE", AttributeProduction(G["feature-list"], G.Epsilon, [lambda s: []])),
            (4, G[":"]): ("SHIFT", 124),
            (4, G["("]): ("SHIFT", 5),
            (5, G[")"]): ("SHIFT", 11),
            (5, G["id"]): ("SHIFT", 6),
            (6, G[":"]): ("SHIFT", 7),
            (7, G["type"]): ("SHIFT", 8),
            (8, G[")"]): ("REDUCE", AttributeProduction(G["param-list"], Sentence(G["id"], G[":"], G["type"]), [lambda s: [ParamNode(s[1], s[3])]])),
            (8, G[","]): ("SHIFT", 9),
            (9, G["id"]): ("SHIFT", 6),
            (10, G[")"]): ("REDUCE", AttributeProduction(G["param-list"], Sentence(G["id"], G[":"], G["type"], G[","], G["param-list"]), [lambda s: [ParamNode(s[1], s[3])] + s[5]])),
            (11, G[":"]): ("SHIFT", 12),
            (12, G["type"]): ("SHIFT", 13),
            (13, G["{"]): ("SHIFT", 14),
            (14, G["true"]): ("SHIFT", 35),
            (14, G["not"]): ("SHIFT", 44),
            (14, G["("]): ("SHIFT", 20),
            (14, G["{"]): ("SHIFT", 19),
            (14, G["if"]): ("SHIFT", 21),
            (14, G["id"]): ("SHIFT", 15),
            (14, G["~"]): ("SHIFT", 37),
            (14, G["isvoid"]): ("SHIFT", 33),
            (14, G["integer"]): ("SHIFT", 18),
            (14, G["new"]): ("SHIFT", 31),
            (14, G["false"]): ("SHIFT", 36),
            (14, G["while"]): ("SHIFT", 22),
            (14, G["case"]): ("SHIFT", 30),
            (14, G["let"]): ("SHIFT", 23),
            (14, G["string"]): ("SHIFT", 17),
            (15, G["<-"]): ("SHIFT", 113),
            (15, G["("]): ("SHIFT", 16),
            (15, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (15, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (16, G["integer"]): ("SHIFT", 18),
            (16, G["let"]): ("SHIFT", 23),
            (16, G["id"]): ("SHIFT", 15),
            (16, G["if"]): ("SHIFT", 21),
            (16, G["{"]): ("SHIFT", 19),
            (16, G["string"]): ("SHIFT", 17),
            (16, G["("]): ("SHIFT", 20),
            (16, G["case"]): ("SHIFT", 30),
            (16, G["true"]): ("SHIFT", 35),
            (16, G["isvoid"]): ("SHIFT", 33),
            (16, G["not"]): ("SHIFT", 44),
            (16, G["new"]): ("SHIFT", 31),
            (16, G["while"]): ("SHIFT", 22),
            (16, G["false"]): ("SHIFT", 36),
            (16, G["~"]): ("SHIFT", 37),
            (17, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (17, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["string"]), [lambda s: StringNode(s[1])])),
            (18, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (18, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["integer"]), [lambda s: IntegerNode(s[1])])),
            (19, G["let"]): ("SHIFT", 23),
            (19, G["{"]): ("SHIFT", 19),
            (19, G["if"]): ("SHIFT", 21),
            (19, G["id"]): ("SHIFT", 15),
            (19, G["not"]): ("SHIFT", 44),
            (19, G["("]): ("SHIFT", 20),
            (19, G["string"]): ("SHIFT", 17),
            (19, G["true"]): ("SHIFT", 35),
            (19, G["isvoid"]): ("SHIFT", 33),
            (19, G["false"]): ("SHIFT", 36),
            (19, G["~"]): ("SHIFT", 37),
            (19, G["integer"]): ("SHIFT", 18),
            (19, G["new"]): ("SHIFT", 31),
            (19, G["while"]): ("SHIFT", 22),
            (19, G["case"]): ("SHIFT", 30),
            (20, G["new"]): ("SHIFT", 31),
            (20, G["false"]): ("SHIFT", 36),
            (20, G["id"]): ("SHIFT", 15),
            (20, G["integer"]): ("SHIFT", 18),
            (20, G["{"]): ("SHIFT", 19),
            (20, G["if"]): ("SHIFT", 21),
            (20, G["while"]): ("SHIFT", 22),
            (20, G["let"]): ("SHIFT", 23),
            (20, G["string"]): ("SHIFT", 17),
            (20, G["~"]): ("SHIFT", 37),
            (20, G["("]): ("SHIFT", 20),
            (20, G["true"]): ("SHIFT", 35),
            (20, G["not"]): ("SHIFT", 44),
            (20, G["isvoid"]): ("SHIFT", 33),
            (20, G["case"]): ("SHIFT", 30),
            (21, G["not"]): ("SHIFT", 44),
            (21, G["id"]): ("SHIFT", 15),
            (21, G["false"]): ("SHIFT", 36),
            (21, G["string"]): ("SHIFT", 17),
            (21, G["true"]): ("SHIFT", 35),
            (21, G["case"]): ("SHIFT", 30),
            (21, G["("]): ("SHIFT", 20),
            (21, G["~"]): ("SHIFT", 37),
            (21, G["let"]): ("SHIFT", 23),
            (21, G["new"]): ("SHIFT", 31),
            (21, G["if"]): ("SHIFT", 21),
            (21, G["{"]): ("SHIFT", 19),
            (21, G["while"]): ("SHIFT", 22),
            (21, G["isvoid"]): ("SHIFT", 33),
            (21, G["integer"]): ("SHIFT", 18),
            (22, G["id"]): ("SHIFT", 15),
            (22, G["not"]): ("SHIFT", 44),
            (22, G["{"]): ("SHIFT", 19),
            (22, G["if"]): ("SHIFT", 21),
            (22, G["new"]): ("SHIFT", 31),
            (22, G["let"]): ("SHIFT", 23),
            (22, G["isvoid"]): ("SHIFT", 33),
            (22, G["string"]): ("SHIFT", 17),
            (22, G["~"]): ("SHIFT", 37),
            (22, G["("]): ("SHIFT", 20),
            (22, G["case"]): ("SHIFT", 30),
            (22, G["true"]): ("SHIFT", 35),
            (22, G["while"]): ("SHIFT", 22),
            (22, G["false"]): ("SHIFT", 36),
            (22, G["integer"]): ("SHIFT", 18),
            (23, G["id"]): ("SHIFT", 24),
            (24, G[":"]): ("SHIFT", 25),
            (25, G["type"]): ("SHIFT", 26),
            (26, G["<-"]): ("SHIFT", 29),
            (26, G[","]): ("SHIFT", 27),
            (26, G["in"]): ("REDUCE", AttributeProduction(G["declaration-list"], Sentence(G["id"], G[":"], G["type"]), [lambda s: [VarDeclarationNode(s[1], s[3])]])),
            (27, G["id"]): ("SHIFT", 24),
            (28, G["in"]): ("REDUCE", AttributeProduction(G["declaration-list"], Sentence(G["id"], G[":"], G["type"], G[","], G["declaration-list"]), [lambda s: [VarDeclarationNode(s[1], s[3])] + s[5]])),
            (29, G["isvoid"]): ("SHIFT", 33),
            (29, G["id"]): ("SHIFT", 15),
            (29, G["string"]): ("SHIFT", 17),
            (29, G["~"]): ("SHIFT", 37),
            (29, G["while"]): ("SHIFT", 22),
            (29, G["if"]): ("SHIFT", 21),
            (29, G["integer"]): ("SHIFT", 18),
            (29, G["{"]): ("SHIFT", 19),
            (29, G["false"]): ("SHIFT", 36),
            (29, G["new"]): ("SHIFT", 31),
            (29, G["let"]): ("SHIFT", 23),
            (29, G["case"]): ("SHIFT", 30),
            (29, G["not"]): ("SHIFT", 44),
            (29, G["true"]): ("SHIFT", 35),
            (29, G["("]): ("SHIFT", 20),
            (30, G["while"]): ("SHIFT", 22),
            (30, G["false"]): ("SHIFT", 36),
            (30, G["id"]): ("SHIFT", 15),
            (30, G["not"]): ("SHIFT", 44),
            (30, G["new"]): ("SHIFT", 31),
            (30, G["if"]): ("SHIFT", 21),
            (30, G["let"]): ("SHIFT", 23),
            (30, G["~"]): ("SHIFT", 37),
            (30, G["{"]): ("SHIFT", 19),
            (30, G["integer"]): ("SHIFT", 18),
            (30, G["true"]): ("SHIFT", 35),
            (30, G["isvoid"]): ("SHIFT", 33),
            (30, G["string"]): ("SHIFT", 17),
            (30, G["("]): ("SHIFT", 20),
            (30, G["case"]): ("SHIFT", 30),
            (31, G["type"]): ("SHIFT", 32),
            (32, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (32, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["new"], G["type"]), [lambda s: InstantiateNode(s[2])])),
            (33, G["new"]): ("SHIFT", 31),
            (33, G["isvoid"]): ("SHIFT", 33),
            (33, G["("]): ("SHIFT", 20),
            (33, G["string"]): ("SHIFT", 17),
            (33, G["id"]): ("SHIFT", 34),
            (33, G["false"]): ("SHIFT", 36),
            (33, G["~"]): ("SHIFT", 37),
            (33, G["integer"]): ("SHIFT", 18),
            (33, G["true"]): ("SHIFT", 35),
            (34, G["("]): ("SHIFT", 16),
            (34, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (34, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["id"]), [lambda s: VariableNode(s[1])])),
            (35, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (35, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["true"]), [lambda s: BooleanNode(s[1])])),
            (36, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (36, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["false"]), [lambda s: BooleanNode(s[1])])),
            (37, G["new"]): ("SHIFT", 31),
            (37, G["isvoid"]): ("SHIFT", 33),
            (37, G["("]): ("SHIFT", 20),
            (37, G["string"]): ("SHIFT", 17),
            (37, G["id"]): ("SHIFT", 34),
            (37, G["false"]): ("SHIFT", 36),
            (37, G["~"]): ("SHIFT", 37),
            (37, G["integer"]): ("SHIFT", 18),
            (37, G["true"]): ("SHIFT", 35),
            (38, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (38, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["function-call"]), [lambda s: s[1]])),
            (39, G["-"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G[","]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["*"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["then"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["/"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["else"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["of"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["<"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["fi"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["+"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["<="]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G[";"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["="]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["loop"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["pool"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["}"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G["in"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (39, G[")"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["~"], G["factor"]), [lambda s: ComplementNode(s[2])])),
            (40, G["."]): ("SHIFT", 41),
            (40, G["@"]): ("SHIFT", 69),
            (40, G["-"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G[","]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["*"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["then"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["/"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["else"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["of"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["<"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["fi"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["+"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["<="]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G[";"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["="]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["loop"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["pool"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["}"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G["in"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (40, G[")"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["atom"]), [lambda s: s[1]])),
            (41, G["id"]): ("SHIFT", 42),
            (42, G["("]): ("SHIFT", 43),
            (43, G["integer"]): ("SHIFT", 18),
            (43, G["let"]): ("SHIFT", 23),
            (43, G["id"]): ("SHIFT", 15),
            (43, G["if"]): ("SHIFT", 21),
            (43, G["{"]): ("SHIFT", 19),
            (43, G["string"]): ("SHIFT", 17),
            (43, G["("]): ("SHIFT", 20),
            (43, G["case"]): ("SHIFT", 30),
            (43, G["true"]): ("SHIFT", 35),
            (43, G["isvoid"]): ("SHIFT", 33),
            (43, G["not"]): ("SHIFT", 44),
            (43, G["new"]): ("SHIFT", 31),
            (43, G["while"]): ("SHIFT", 22),
            (43, G["false"]): ("SHIFT", 36),
            (43, G["~"]): ("SHIFT", 37),
            (44, G["string"]): ("SHIFT", 17),
            (44, G["true"]): ("SHIFT", 35),
            (44, G["("]): ("SHIFT", 20),
            (44, G["not"]): ("SHIFT", 44),
            (44, G["{"]): ("SHIFT", 19),
            (44, G["if"]): ("SHIFT", 21),
            (44, G["false"]): ("SHIFT", 36),
            (44, G["isvoid"]): ("SHIFT", 33),
            (44, G["id"]): ("SHIFT", 15),
            (44, G["let"]): ("SHIFT", 23),
            (44, G["case"]): ("SHIFT", 30),
            (44, G["~"]): ("SHIFT", 37),
            (44, G["new"]): ("SHIFT", 31),
            (44, G["while"]): ("SHIFT", 22),
            (44, G["integer"]): ("SHIFT", 18),
            (45, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (45, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["not"], G["expr"]), [lambda s: NegationNode(s[2])])),
            (46, G["="]): ("SHIFT", 61),
            (46, G["<="]): ("SHIFT", 59),
            (46, G["<"]): ("SHIFT", 47),
            (46, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (46, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["comp"]), [lambda s: s[1]])),
            (47, G["isvoid"]): ("SHIFT", 33),
            (47, G["string"]): ("SHIFT", 17),
            (47, G["id"]): ("SHIFT", 34),
            (47, G["~"]): ("SHIFT", 37),
            (47, G["true"]): ("SHIFT", 35),
            (47, G["new"]): ("SHIFT", 31),
            (47, G["("]): ("SHIFT", 20),
            (47, G["false"]): ("SHIFT", 36),
            (47, G["integer"]): ("SHIFT", 18),
            (48, G[","]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["then"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["else"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["of"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["<"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["fi"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["<="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G[";"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["loop"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["pool"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["}"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["in"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G[")"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<"], G["arith"]), [lambda s: LessNode(s[1], s[3])])),
            (48, G["-"]): ("SHIFT", 56),
            (48, G["+"]): ("SHIFT", 49),
            (49, G["string"]): ("SHIFT", 17),
            (49, G["id"]): ("SHIFT", 34),
            (49, G["~"]): ("SHIFT", 37),
            (49, G["true"]): ("SHIFT", 35),
            (49, G["new"]): ("SHIFT", 31),
            (49, G["("]): ("SHIFT", 20),
            (49, G["false"]): ("SHIFT", 36),
            (49, G["isvoid"]): ("SHIFT", 33),
            (49, G["integer"]): ("SHIFT", 18),
            (50, G["*"]): ("SHIFT", 51),
            (50, G["-"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G[","]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["then"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["else"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["of"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["<"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["fi"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["+"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["<="]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G[";"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["="]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["loop"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["pool"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["}"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["in"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G[")"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["+"], G["term"]), [lambda s: PlusNode(s[1], s[3])])),
            (50, G["/"]): ("SHIFT", 53),
            (51, G["new"]): ("SHIFT", 31),
            (51, G["("]): ("SHIFT", 20),
            (51, G["string"]): ("SHIFT", 17),
            (51, G["id"]): ("SHIFT", 34),
            (51, G["false"]): ("SHIFT", 36),
            (51, G["~"]): ("SHIFT", 37),
            (51, G["isvoid"]): ("SHIFT", 33),
            (51, G["integer"]): ("SHIFT", 18),
            (51, G["true"]): ("SHIFT", 35),
            (52, G["-"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G[","]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["*"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["then"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["/"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["else"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["of"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["<"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["fi"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["+"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["<="]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G[";"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["="]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["loop"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["pool"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["}"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G["in"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (52, G[")"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["*"], G["factor"]), [lambda s: StarNode(s[1], s[3])])),
            (53, G["new"]): ("SHIFT", 31),
            (53, G["("]): ("SHIFT", 20),
            (53, G["string"]): ("SHIFT", 17),
            (53, G["id"]): ("SHIFT", 34),
            (53, G["false"]): ("SHIFT", 36),
            (53, G["~"]): ("SHIFT", 37),
            (53, G["isvoid"]): ("SHIFT", 33),
            (53, G["integer"]): ("SHIFT", 18),
            (53, G["true"]): ("SHIFT", 35),
            (54, G["-"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G[","]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["*"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["then"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["/"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["else"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["of"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["<"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["fi"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["+"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["<="]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G[";"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["="]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["loop"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["pool"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["}"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G["in"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (54, G[")"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["term"], G["/"], G["factor"]), [lambda s: DivNode(s[1], s[3])])),
            (55, G["-"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G[","]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["*"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["then"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["/"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["else"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["of"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["<"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["fi"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["+"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["<="]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G[";"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["="]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["loop"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["pool"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["}"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G["in"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (55, G[")"]): ("REDUCE", AttributeProduction(G["term"], Sentence(G["factor"]), [lambda s: s[1]])),
            (56, G["string"]): ("SHIFT", 17),
            (56, G["id"]): ("SHIFT", 34),
            (56, G["~"]): ("SHIFT", 37),
            (56, G["true"]): ("SHIFT", 35),
            (56, G["new"]): ("SHIFT", 31),
            (56, G["("]): ("SHIFT", 20),
            (56, G["false"]): ("SHIFT", 36),
            (56, G["isvoid"]): ("SHIFT", 33),
            (56, G["integer"]): ("SHIFT", 18),
            (57, G["*"]): ("SHIFT", 51),
            (57, G["-"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G[","]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["then"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["else"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["of"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["<"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["fi"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["+"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["<="]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G[";"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["="]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["loop"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["pool"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["}"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["in"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G[")"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["arith"], G["-"], G["term"]), [lambda s: MinusNode(s[1], s[3])])),
            (57, G["/"]): ("SHIFT", 53),
            (58, G["*"]): ("SHIFT", 51),
            (58, G["-"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G[","]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["then"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["else"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["of"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["<"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["fi"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["+"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["<="]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G[";"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["="]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["loop"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["pool"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["}"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["in"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G[")"]): ("REDUCE", AttributeProduction(G["arith"], Sentence(G["term"]), [lambda s: s[1]])),
            (58, G["/"]): ("SHIFT", 53),
            (59, G["isvoid"]): ("SHIFT", 33),
            (59, G["string"]): ("SHIFT", 17),
            (59, G["id"]): ("SHIFT", 34),
            (59, G["~"]): ("SHIFT", 37),
            (59, G["true"]): ("SHIFT", 35),
            (59, G["new"]): ("SHIFT", 31),
            (59, G["("]): ("SHIFT", 20),
            (59, G["false"]): ("SHIFT", 36),
            (59, G["integer"]): ("SHIFT", 18),
            (60, G[","]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["then"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["else"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["of"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["<"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["fi"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["<="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G[";"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["loop"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["pool"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["}"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["in"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G[")"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["<="], G["arith"]), [lambda s: LessEqualNode(s[1], s[3])])),
            (60, G["+"]): ("SHIFT", 49),
            (60, G["-"]): ("SHIFT", 56),
            (61, G["string"]): ("SHIFT", 17),
            (61, G["id"]): ("SHIFT", 34),
            (61, G["~"]): ("SHIFT", 37),
            (61, G["true"]): ("SHIFT", 35),
            (61, G["new"]): ("SHIFT", 31),
            (61, G["("]): ("SHIFT", 20),
            (61, G["false"]): ("SHIFT", 36),
            (61, G["isvoid"]): ("SHIFT", 33),
            (61, G["integer"]): ("SHIFT", 18),
            (62, G["-"]): ("SHIFT", 56),
            (62, G["+"]): ("SHIFT", 49),
            (62, G[","]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["then"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["else"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["of"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["<"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["fi"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["<="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G[";"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["loop"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["pool"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["}"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G["in"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (62, G[")"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["comp"], G["="], G["arith"]), [lambda s: EqualNode(s[1], s[3])])),
            (63, G[","]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["then"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["else"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["of"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["<"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["fi"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["<="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G[";"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["="]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["loop"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["pool"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["}"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["in"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G[")"]): ("REDUCE", AttributeProduction(G["comp"], Sentence(G["arith"]), [lambda s: s[1]])),
            (63, G["-"]): ("SHIFT", 56),
            (63, G["+"]): ("SHIFT", 49),
            (64, G[")"]): ("SHIFT", 65),
            (65, G["then"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["else"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["fi"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["loop"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["pool"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["in"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["of"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["+"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["-"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["*"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["/"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["<"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["<="]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["="]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["}"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G[")"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G[","]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["."]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G["@"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (65, G[";"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (66, G[","]): ("SHIFT", 67),
            (66, G[")"]): ("REDUCE", AttributeProduction(G["expr-list"], Sentence(G["expr"]), [lambda s: [s[1]]])),
            (67, G["integer"]): ("SHIFT", 18),
            (67, G["let"]): ("SHIFT", 23),
            (67, G["id"]): ("SHIFT", 15),
            (67, G["if"]): ("SHIFT", 21),
            (67, G["{"]): ("SHIFT", 19),
            (67, G["string"]): ("SHIFT", 17),
            (67, G["("]): ("SHIFT", 20),
            (67, G["case"]): ("SHIFT", 30),
            (67, G["true"]): ("SHIFT", 35),
            (67, G["isvoid"]): ("SHIFT", 33),
            (67, G["not"]): ("SHIFT", 44),
            (67, G["new"]): ("SHIFT", 31),
            (67, G["while"]): ("SHIFT", 22),
            (67, G["false"]): ("SHIFT", 36),
            (67, G["~"]): ("SHIFT", 37),
            (68, G[")"]): ("REDUCE", AttributeProduction(G["expr-list"], Sentence(G["expr"], G[","], G["expr-list"]), [lambda s: [s[1]] + s[3]])),
            (69, G["type"]): ("SHIFT", 70),
            (70, G["."]): ("SHIFT", 71),
            (71, G["id"]): ("SHIFT", 72),
            (72, G["("]): ("SHIFT", 73),
            (73, G["integer"]): ("SHIFT", 18),
            (73, G["let"]): ("SHIFT", 23),
            (73, G["id"]): ("SHIFT", 15),
            (73, G["if"]): ("SHIFT", 21),
            (73, G["{"]): ("SHIFT", 19),
            (73, G["string"]): ("SHIFT", 17),
            (73, G["("]): ("SHIFT", 20),
            (73, G["case"]): ("SHIFT", 30),
            (73, G["true"]): ("SHIFT", 35),
            (73, G["isvoid"]): ("SHIFT", 33),
            (73, G["not"]): ("SHIFT", 44),
            (73, G["new"]): ("SHIFT", 31),
            (73, G["while"]): ("SHIFT", 22),
            (73, G["false"]): ("SHIFT", 36),
            (73, G["~"]): ("SHIFT", 37),
            (74, G[")"]): ("SHIFT", 75),
            (75, G["then"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["else"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["fi"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["loop"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["pool"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["in"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["of"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["+"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["-"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["*"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["/"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["<"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["<="]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["="]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["}"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G[")"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G[","]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["."]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G["@"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (75, G[";"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["atom"], G["@"], G["type"], G["."], G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[3], s[5], s[1])])),
            (76, G["-"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G[","]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["*"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["then"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["/"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["else"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["of"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["<"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["fi"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["+"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["<="]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G[";"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["="]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["loop"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["pool"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["}"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G["in"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (76, G[")"]): ("REDUCE", AttributeProduction(G["factor"], Sentence(G["isvoid"], G["factor"]), [lambda s: IsVoidNode(s[2])])),
            (77, G["of"]): ("SHIFT", 78),
            (78, G["id"]): ("SHIFT", 79),
            (79, G[":"]): ("SHIFT", 80),
            (80, G["type"]): ("SHIFT", 81),
            (81, G["=>"]): ("SHIFT", 82),
            (82, G["let"]): ("SHIFT", 23),
            (82, G["id"]): ("SHIFT", 15),
            (82, G["if"]): ("SHIFT", 21),
            (82, G["{"]): ("SHIFT", 19),
            (82, G["not"]): ("SHIFT", 44),
            (82, G["("]): ("SHIFT", 20),
            (82, G["string"]): ("SHIFT", 17),
            (82, G["true"]): ("SHIFT", 35),
            (82, G["isvoid"]): ("SHIFT", 33),
            (82, G["false"]): ("SHIFT", 36),
            (82, G["~"]): ("SHIFT", 37),
            (82, G["integer"]): ("SHIFT", 18),
            (82, G["new"]): ("SHIFT", 31),
            (82, G["while"]): ("SHIFT", 22),
            (82, G["case"]): ("SHIFT", 30),
            (83, G[";"]): ("SHIFT", 84),
            (84, G["id"]): ("SHIFT", 79),
            (84, G["esac"]): ("REDUCE", AttributeProduction(G["case-list"], Sentence(G["id"], G[":"], G["type"], G["=>"], G["expr"], G[";"]), [lambda s: [SingleCaseNode(s[1], s[3], s[5])]])),
            (85, G["esac"]): ("REDUCE", AttributeProduction(G["case-list"], Sentence(G["id"], G[":"], G["type"], G["=>"], G["expr"], G[";"], G["case-list"]), [lambda s: [SingleCaseNode(s[1], s[3], s[5])] + s[7]])),
            (86, G["esac"]): ("SHIFT", 87),
            (87, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (87, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["case"], G["expr"], G["of"], G["case-list"], G["esac"]), [lambda s: CasesNode(s[2], s[4])])),
            (88, G["in"]): ("REDUCE", AttributeProduction(G["declaration-list"], Sentence(G["id"], G[":"], G["type"], G["<-"], G["expr"]), [lambda s: [VarDeclarationNode(s[1], s[3], s[5])]])),
            (88, G[","]): ("SHIFT", 89),
            (89, G["id"]): ("SHIFT", 24),
            (90, G["in"]): ("REDUCE", AttributeProduction(G["declaration-list"], Sentence(G["id"], G[":"], G["type"], G["<-"], G["expr"], G[","], G["declaration-list"]), [lambda s: [VarDeclarationNode(s[1], s[3], s[5])] + s[7]])),
            (91, G["in"]): ("SHIFT", 92),
            (92, G["string"]): ("SHIFT", 17),
            (92, G["true"]): ("SHIFT", 35),
            (92, G["("]): ("SHIFT", 20),
            (92, G["not"]): ("SHIFT", 44),
            (92, G["false"]): ("SHIFT", 36),
            (92, G["if"]): ("SHIFT", 21),
            (92, G["{"]): ("SHIFT", 19),
            (92, G["isvoid"]): ("SHIFT", 33),
            (92, G["id"]): ("SHIFT", 15),
            (92, G["let"]): ("SHIFT", 23),
            (92, G["case"]): ("SHIFT", 30),
            (92, G["~"]): ("SHIFT", 37),
            (92, G["new"]): ("SHIFT", 31),
            (92, G["while"]): ("SHIFT", 22),
            (92, G["integer"]): ("SHIFT", 18),
            (93, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (93, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["let"], G["declaration-list"], G["in"], G["expr"]), [lambda s: LetNode(s[2], s[4])])),
            (94, G["loop"]): ("SHIFT", 95),
            (95, G["false"]): ("SHIFT", 36),
            (95, G["isvoid"]): ("SHIFT", 33),
            (95, G["while"]): ("SHIFT", 22),
            (95, G["new"]): ("SHIFT", 31),
            (95, G["~"]): ("SHIFT", 37),
            (95, G["case"]): ("SHIFT", 30),
            (95, G["("]): ("SHIFT", 20),
            (95, G["true"]): ("SHIFT", 35),
            (95, G["string"]): ("SHIFT", 17),
            (95, G["let"]): ("SHIFT", 23),
            (95, G["id"]): ("SHIFT", 15),
            (95, G["integer"]): ("SHIFT", 18),
            (95, G["{"]): ("SHIFT", 19),
            (95, G["if"]): ("SHIFT", 21),
            (95, G["not"]): ("SHIFT", 44),
            (96, G["pool"]): ("SHIFT", 97),
            (97, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (97, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["while"], G["expr"], G["loop"], G["expr"], G["pool"]), [lambda s: WhileNode(s[2], s[4])])),
            (98, G["then"]): ("SHIFT", 99),
            (99, G["new"]): ("SHIFT", 31),
            (99, G["case"]): ("SHIFT", 30),
            (99, G["while"]): ("SHIFT", 22),
            (99, G["~"]): ("SHIFT", 37),
            (99, G["("]): ("SHIFT", 20),
            (99, G["true"]): ("SHIFT", 35),
            (99, G["string"]): ("SHIFT", 17),
            (99, G["id"]): ("SHIFT", 15),
            (99, G["integer"]): ("SHIFT", 18),
            (99, G["{"]): ("SHIFT", 19),
            (99, G["not"]): ("SHIFT", 44),
            (99, G["false"]): ("SHIFT", 36),
            (99, G["isvoid"]): ("SHIFT", 33),
            (99, G["if"]): ("SHIFT", 21),
            (99, G["let"]): ("SHIFT", 23),
            (100, G["else"]): ("SHIFT", 101),
            (101, G["true"]): ("SHIFT", 35),
            (101, G["not"]): ("SHIFT", 44),
            (101, G["isvoid"]): ("SHIFT", 33),
            (101, G["case"]): ("SHIFT", 30),
            (101, G["new"]): ("SHIFT", 31),
            (101, G["false"]): ("SHIFT", 36),
            (101, G["id"]): ("SHIFT", 15),
            (101, G["integer"]): ("SHIFT", 18),
            (101, G["if"]): ("SHIFT", 21),
            (101, G["{"]): ("SHIFT", 19),
            (101, G["while"]): ("SHIFT", 22),
            (101, G["let"]): ("SHIFT", 23),
            (101, G["string"]): ("SHIFT", 17),
            (101, G["~"]): ("SHIFT", 37),
            (101, G["("]): ("SHIFT", 20),
            (102, G["fi"]): ("SHIFT", 103),
            (103, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (103, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["if"], G["expr"], G["then"], G["expr"], G["else"], G["expr"], G["fi"]), [lambda s: ConditionalNode(s[2], s[4], s[6])])),
            (104, G[")"]): ("SHIFT", 105),
            (105, G["then"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["else"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["fi"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["loop"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["pool"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["in"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["of"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["+"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["-"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["*"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["/"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["<"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["<="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["="]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["}"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G[")"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G[","]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["."]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G["@"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (105, G[";"]): ("REDUCE", AttributeProduction(G["atom"], Sentence(G["("], G["expr"], G[")"]), [lambda s: s[2]])),
            (106, G["}"]): ("SHIFT", 107),
            (107, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (107, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["{"], G["block"], G["}"]), [lambda s: BlockNode(s[2])])),
            (108, G[";"]): ("SHIFT", 109),
            (109, G["let"]): ("SHIFT", 23),
            (109, G["id"]): ("SHIFT", 15),
            (109, G["if"]): ("SHIFT", 21),
            (109, G["{"]): ("SHIFT", 19),
            (109, G["}"]): ("REDUCE", AttributeProduction(G["block"], Sentence(G["expr"], G[";"]), [lambda s: [s[1]]])),
            (109, G["not"]): ("SHIFT", 44),
            (109, G["("]): ("SHIFT", 20),
            (109, G["string"]): ("SHIFT", 17),
            (109, G["true"]): ("SHIFT", 35),
            (109, G["isvoid"]): ("SHIFT", 33),
            (109, G["false"]): ("SHIFT", 36),
            (109, G["~"]): ("SHIFT", 37),
            (109, G["integer"]): ("SHIFT", 18),
            (109, G["new"]): ("SHIFT", 31),
            (109, G["while"]): ("SHIFT", 22),
            (109, G["case"]): ("SHIFT", 30),
            (110, G["}"]): ("REDUCE", AttributeProduction(G["block"], Sentence(G["expr"], G[";"], G["block"]), [lambda s: [s[1]] + s[3]])),
            (111, G[")"]): ("SHIFT", 112),
            (112, G["then"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["else"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["fi"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["loop"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["pool"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["in"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["of"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["+"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["-"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["*"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["/"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["<"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["<="]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["="]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["}"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G[")"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G[","]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["."]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G["@"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (112, G[";"]): ("REDUCE", AttributeProduction(G["function-call"], Sentence(G["id"], G["("], G["expr-list"], G[")"]), [lambda s: MethodCallNode(s[1], s[3])])),
            (113, G["string"]): ("SHIFT", 17),
            (113, G["true"]): ("SHIFT", 35),
            (113, G["("]): ("SHIFT", 20),
            (113, G["not"]): ("SHIFT", 44),
            (113, G["false"]): ("SHIFT", 36),
            (113, G["if"]): ("SHIFT", 21),
            (113, G["{"]): ("SHIFT", 19),
            (113, G["isvoid"]): ("SHIFT", 33),
            (113, G["id"]): ("SHIFT", 15),
            (113, G["let"]): ("SHIFT", 23),
            (113, G["case"]): ("SHIFT", 30),
            (113, G["~"]): ("SHIFT", 37),
            (113, G["new"]): ("SHIFT", 31),
            (113, G["while"]): ("SHIFT", 22),
            (113, G["integer"]): ("SHIFT", 18),
            (114, G[","]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["then"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["else"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["of"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["fi"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G[";"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["loop"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["pool"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["}"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G["in"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (114, G[")"]): ("REDUCE", AttributeProduction(G["expr"], Sentence(G["id"], G["<-"], G["expr"]), [lambda s: AssignNode(s[1], s[3])])),
            (115, G["}"]): ("SHIFT", 116),
            (116, G[";"]): ("REDUCE", AttributeProduction(G["method"], Sentence(G["id"], G["("], G[")"], G[":"], G["type"], G["{"], G["expr"], G["}"]), [lambda s: MethodDeclarationNode(s[1], [], s[5], s[7])])),
            (117, G[")"]): ("SHIFT", 118),
            (118, G[":"]): ("SHIFT", 119),
            (119, G["type"]): ("SHIFT", 120),
            (120, G["{"]): ("SHIFT", 121),
            (121, G["true"]): ("SHIFT", 35),
            (121, G["not"]): ("SHIFT", 44),
            (121, G["("]): ("SHIFT", 20),
            (121, G["{"]): ("SHIFT", 19),
            (121, G["if"]): ("SHIFT", 21),
            (121, G["id"]): ("SHIFT", 15),
            (121, G["~"]): ("SHIFT", 37),
            (121, G["isvoid"]): ("SHIFT", 33),
            (121, G["integer"]): ("SHIFT", 18),
            (121, G["new"]): ("SHIFT", 31),
            (121, G["false"]): ("SHIFT", 36),
            (121, G["while"]): ("SHIFT", 22),
            (121, G["case"]): ("SHIFT", 30),
            (121, G["let"]): ("SHIFT", 23),
            (121, G["string"]): ("SHIFT", 17),
            (122, G["}"]): ("SHIFT", 123),
            (123, G[";"]): ("REDUCE", AttributeProduction(G["method"], Sentence(G["id"], G["("], G["param-list"], G[")"], G[":"], G["type"], G["{"], G["expr"], G["}"]), [lambda s: MethodDeclarationNode(s[1], s[3], s[6], s[8])])),
            (124, G["type"]): ("SHIFT", 125),
            (125, G["<-"]): ("SHIFT", 126),
            (125, G[";"]): ("REDUCE", AttributeProduction(G["attribute"], Sentence(G["id"], G[":"], G["type"]), [lambda s: AttrDeclarationNode(s[1], s[3])])),
            (126, G["id"]): ("SHIFT", 15),
            (126, G["let"]): ("SHIFT", 23),
            (126, G["if"]): ("SHIFT", 21),
            (126, G["{"]): ("SHIFT", 19),
            (126, G["not"]): ("SHIFT", 44),
            (126, G["("]): ("SHIFT", 20),
            (126, G["string"]): ("SHIFT", 17),
            (126, G["true"]): ("SHIFT", 35),
            (126, G["isvoid"]): ("SHIFT", 33),
            (126, G["false"]): ("SHIFT", 36),
            (126, G["~"]): ("SHIFT", 37),
            (126, G["integer"]): ("SHIFT", 18),
            (126, G["new"]): ("SHIFT", 31),
            (126, G["while"]): ("SHIFT", 22),
            (126, G["case"]): ("SHIFT", 30),
            (127, G[";"]): ("REDUCE", AttributeProduction(G["attribute"], Sentence(G["id"], G[":"], G["type"], G["<-"], G["expr"]), [lambda s: AttrDeclarationNode(s[1], s[3], s[5])])),
            (128, G["}"]): ("SHIFT", 129),
            (129, G["class"]): ("REDUCE", AttributeProduction(G["class-def"], Sentence(G["class"], G["type"], G["{"], G["feature-list"], G["}"]), [lambda s: ClassDeclarationNode(s[2], s[4])])),
            (129, G["$"]): ("REDUCE", AttributeProduction(G["class-def"], Sentence(G["class"], G["type"], G["{"], G["feature-list"], G["}"]), [lambda s: ClassDeclarationNode(s[2], s[4])])),
            (130, G[";"]): ("SHIFT", 131),
            (131, G["id"]): ("SHIFT", 4),
            (131, G["}"]): ("REDUCE", AttributeProduction(G["feature-list"], G.Epsilon, [lambda s: []])),
            (132, G["}"]): ("REDUCE", AttributeProduction(G["feature-list"], Sentence(G["attribute"], G[";"], G["feature-list"]), [lambda s: [s[1]] + s[3]])),
            (133, G[";"]): ("SHIFT", 134),
            (134, G["id"]): ("SHIFT", 4),
            (134, G["}"]): ("REDUCE", AttributeProduction(G["feature-list"], G.Epsilon, [lambda s: []])),
            (135, G["}"]): ("REDUCE", AttributeProduction(G["feature-list"], Sentence(G["method"], G[";"], G["feature-list"]), [lambda s: [s[1]] + s[3]])),
            (136, G["type"]): ("SHIFT", 137),
            (137, G["{"]): ("SHIFT", 138),
            (138, G["id"]): ("SHIFT", 4),
            (138, G["}"]): ("REDUCE", AttributeProduction(G["feature-list"], G.Epsilon, [lambda s: []])),
            (139, G["}"]): ("SHIFT", 140),
            (140, G["class"]): ("REDUCE", AttributeProduction(G["class-def"], Sentence(G["class"], G["type"], G["inherits"], G["type"], G["{"], G["feature-list"], G["}"]), [lambda s: ClassDeclarationNode(s[2], s[6], s[4])])),
            (140, G["$"]): ("REDUCE", AttributeProduction(G["class-def"], Sentence(G["class"], G["type"], G["inherits"], G["type"], G["{"], G["feature-list"], G["}"]), [lambda s: ClassDeclarationNode(s[2], s[6], s[4])])),
            (141, G["$"]): ("OK", None),
            (142, G["$"]): ("REDUCE", AttributeProduction(G["program"], Sentence(G["class-set"]), [lambda s: ProgramNode(s[1])])),
            (143, G["class"]): ("SHIFT", 1),
            (143, G["$"]): ("REDUCE", AttributeProduction(G["class-set"], Sentence(G["class-def"]), [lambda s: [s[1]]])),
            (144, G["$"]): ("REDUCE", AttributeProduction(G["class-set"], Sentence(G["class-def"], G["class-set"]), [lambda s: [s[1]] + s[2]])),
        }

    def __goto_table(self):
        G = self.G
        return {
            (0, G["class-def"]): 143,
            (0, G["class-set"]): 142,
            (0, G["program"]): 141,
            (3, G["attribute"]): 130,
            (3, G["method"]): 133,
            (3, G["feature-list"]): 128,
            (5, G["param-list"]): 117,
            (9, G["param-list"]): 10,
            (14, G["arith"]): 63,
            (14, G["atom"]): 40,
            (14, G["term"]): 58,
            (14, G["comp"]): 46,
            (14, G["expr"]): 115,
            (14, G["function-call"]): 38,
            (14, G["factor"]): 55,
            (16, G["expr"]): 66,
            (16, G["comp"]): 46,
            (16, G["function-call"]): 38,
            (16, G["atom"]): 40,
            (16, G["arith"]): 63,
            (16, G["factor"]): 55,
            (16, G["term"]): 58,
            (16, G["expr-list"]): 111,
            (19, G["atom"]): 40,
            (19, G["expr"]): 108,
            (19, G["term"]): 58,
            (19, G["function-call"]): 38,
            (19, G["arith"]): 63,
            (19, G["comp"]): 46,
            (19, G["block"]): 106,
            (19, G["factor"]): 55,
            (20, G["atom"]): 40,
            (20, G["function-call"]): 38,
            (20, G["comp"]): 46,
            (20, G["arith"]): 63,
            (20, G["factor"]): 55,
            (20, G["term"]): 58,
            (20, G["expr"]): 104,
            (21, G["function-call"]): 38,
            (21, G["factor"]): 55,
            (21, G["arith"]): 63,
            (21, G["comp"]): 46,
            (21, G["term"]): 58,
            (21, G["atom"]): 40,
            (21, G["expr"]): 98,
            (22, G["comp"]): 46,
            (22, G["arith"]): 63,
            (22, G["factor"]): 55,
            (22, G["term"]): 58,
            (22, G["atom"]): 40,
            (22, G["expr"]): 94,
            (22, G["function-call"]): 38,
            (23, G["declaration-list"]): 91,
            (27, G["declaration-list"]): 28,
            (29, G["term"]): 58,
            (29, G["expr"]): 88,
            (29, G["atom"]): 40,
            (29, G["arith"]): 63,
            (29, G["function-call"]): 38,
            (29, G["factor"]): 55,
            (29, G["comp"]): 46,
            (30, G["term"]): 58,
            (30, G["atom"]): 40,
            (30, G["comp"]): 46,
            (30, G["function-call"]): 38,
            (30, G["arith"]): 63,
            (30, G["expr"]): 77,
            (30, G["factor"]): 55,
            (33, G["function-call"]): 38,
            (33, G["atom"]): 40,
            (33, G["factor"]): 76,
            (37, G["function-call"]): 38,
            (37, G["atom"]): 40,
            (37, G["factor"]): 39,
            (43, G["expr"]): 66,
            (43, G["comp"]): 46,
            (43, G["function-call"]): 38,
            (43, G["atom"]): 40,
            (43, G["arith"]): 63,
            (43, G["factor"]): 55,
            (43, G["term"]): 58,
            (43, G["expr-list"]): 64,
            (44, G["function-call"]): 38,
            (44, G["factor"]): 55,
            (44, G["term"]): 58,
            (44, G["arith"]): 63,
            (44, G["atom"]): 40,
            (44, G["comp"]): 46,
            (44, G["expr"]): 45,
            (47, G["function-call"]): 38,
            (47, G["arith"]): 48,
            (47, G["factor"]): 55,
            (47, G["term"]): 58,
            (47, G["atom"]): 40,
            (49, G["function-call"]): 38,
            (49, G["factor"]): 55,
            (49, G["atom"]): 40,
            (49, G["term"]): 50,
            (51, G["function-call"]): 38,
            (51, G["factor"]): 52,
            (51, G["atom"]): 40,
            (53, G["function-call"]): 38,
            (53, G["atom"]): 40,
            (53, G["factor"]): 54,
            (56, G["function-call"]): 38,
            (56, G["term"]): 57,
            (56, G["factor"]): 55,
            (56, G["atom"]): 40,
            (59, G["function-call"]): 38,
            (59, G["arith"]): 60,
            (59, G["factor"]): 55,
            (59, G["term"]): 58,
            (59, G["atom"]): 40,
            (61, G["function-call"]): 38,
            (61, G["arith"]): 62,
            (61, G["factor"]): 55,
            (61, G["atom"]): 40,
            (61, G["term"]): 58,
            (67, G["expr"]): 66,
            (67, G["comp"]): 46,
            (67, G["function-call"]): 38,
            (67, G["atom"]): 40,
            (67, G["arith"]): 63,
            (67, G["factor"]): 55,
            (67, G["term"]): 58,
            (67, G["expr-list"]): 68,
            (73, G["expr"]): 66,
            (73, G["comp"]): 46,
            (73, G["function-call"]): 38,
            (73, G["atom"]): 40,
            (73, G["arith"]): 63,
            (73, G["factor"]): 55,
            (73, G["term"]): 58,
            (73, G["expr-list"]): 74,
            (78, G["case-list"]): 86,
            (82, G["atom"]): 40,
            (82, G["term"]): 58,
            (82, G["expr"]): 83,
            (82, G["function-call"]): 38,
            (82, G["arith"]): 63,
            (82, G["comp"]): 46,
            (82, G["factor"]): 55,
            (84, G["case-list"]): 85,
            (89, G["declaration-list"]): 90,
            (92, G["function-call"]): 38,
            (92, G["factor"]): 55,
            (92, G["term"]): 58,
            (92, G["arith"]): 63,
            (92, G["atom"]): 40,
            (92, G["comp"]): 46,
            (92, G["expr"]): 93,
            (95, G["comp"]): 46,
            (95, G["arith"]): 63,
            (95, G["term"]): 58,
            (95, G["factor"]): 55,
            (95, G["atom"]): 40,
            (95, G["expr"]): 96,
            (95, G["function-call"]): 38,
            (99, G["comp"]): 46,
            (99, G["expr"]): 100,
            (99, G["term"]): 58,
            (99, G["factor"]): 55,
            (99, G["atom"]): 40,
            (99, G["arith"]): 63,
            (99, G["function-call"]): 38,
            (101, G["expr"]): 102,
            (101, G["atom"]): 40,
            (101, G["comp"]): 46,
            (101, G["term"]): 58,
            (101, G["function-call"]): 38,
            (101, G["arith"]): 63,
            (101, G["factor"]): 55,
            (109, G["atom"]): 40,
            (109, G["expr"]): 108,
            (109, G["term"]): 58,
            (109, G["function-call"]): 38,
            (109, G["arith"]): 63,
            (109, G["comp"]): 46,
            (109, G["block"]): 110,
            (109, G["factor"]): 55,
            (113, G["function-call"]): 38,
            (113, G["factor"]): 55,
            (113, G["term"]): 58,
            (113, G["arith"]): 63,
            (113, G["atom"]): 40,
            (113, G["comp"]): 46,
            (113, G["expr"]): 114,
            (121, G["arith"]): 63,
            (121, G["atom"]): 40,
            (121, G["term"]): 58,
            (121, G["comp"]): 46,
            (121, G["function-call"]): 38,
            (121, G["factor"]): 55,
            (121, G["expr"]): 122,
            (126, G["atom"]): 40,
            (126, G["expr"]): 127,
            (126, G["term"]): 58,
            (126, G["function-call"]): 38,
            (126, G["arith"]): 63,
            (126, G["comp"]): 46,
            (126, G["factor"]): 55,
            (131, G["attribute"]): 130,
            (131, G["method"]): 133,
            (131, G["feature-list"]): 132,
            (134, G["attribute"]): 130,
            (134, G["method"]): 133,
            (134, G["feature-list"]): 135,
            (138, G["feature-list"]): 139,
            (138, G["attribute"]): 130,
            (138, G["method"]): 133,
            (143, G["class-def"]): 143,
            (143, G["class-set"]): 144,
        }
