from cmp.automata import State
from cmp.parsing import Lexer
from cmp.regex import NFA


class CoolLexer(Lexer):
    def __init__(self, G):
        self.G = G
        self.eof = G.EOF
        self.regexs = self._build_regexs(self.__table())
        self.automaton = self._build_automaton()

    def __table(self):
        G = self.G
        return [
            (G["+"], NFA(2, [0], {(1, "+"): [0], }, start=1)),
            (G["-"], NFA(2, [0], {(1, "-"): [0], }, start=1)),
            (G["*"], NFA(2, [0], {(1, "*"): [0], }, start=1)),
            (G["/"], NFA(2, [1], {(0, "/"): [1], }, start=0)),
            (G["<="], NFA(3, [1], {(0, "<"): [2], (2, "="): [1], }, start=0)),
            (G["<"], NFA(2, [1], {(0, "<"): [1], }, start=0)),
            (G["="], NFA(2, [1], {(0, "="): [1], }, start=0)),
            (G["~"], NFA(2, [1], {(0, "~"): [1], }, start=0)),
            (G["not"], NFA(4, [1], {(2, "n"): [3], (3, "o"): [0], (0, "t"): [1], }, start=2)),
            (G["{"], NFA(2, [1], {(0, "{"): [1], }, start=0)),
            (G["}"], NFA(2, [0], {(1, "}"): [0], }, start=1)),
            (G["("], NFA(2, [0], {(1, "("): [0], }, start=1)),
            (G[")"], NFA(2, [1], {(0, ")"): [1], }, start=0)),
            (G[","], NFA(2, [1], {(0, ","): [1], }, start=0)),
            (G["."], NFA(2, [0], {(1, "."): [0], }, start=1)),
            (G["@"], NFA(2, [1], {(0, "@"): [1], }, start=0)),
            (G[":"], NFA(2, [0], {(1, ":"): [0], }, start=1)),
            (G[";"], NFA(2, [1], {(0, ";"): [1], }, start=0)),
            (G["<-"], NFA(3, [1], {(0, "<"): [2], (2, "-"): [1], }, start=0)),
            (G["=>"], NFA(3, [2], {(0, "="): [1], (1, ">"): [2], }, start=0)),
            (G["class"], NFA(6, [5], {(0, "c"): [1], (1, "l"): [2], (2, "a"): [3], (3, "s"): [4], (4, "s"): [5], }, start=0)),
            (G["inherits"], NFA(9, [6], {(3, "i"): [7], (7, "n"): [8], (8, "h"): [1], (1, "e"): [2], (2, "r"): [4], (4, "i"): [0], (0, "t"): [5], (5, "s"): [6], }, start=3)),
            (G["if"], NFA(3, [0], {(2, "i"): [1], (1, "f"): [0], }, start=2)),
            (G["then"], NFA(5, [1], {(0, "t"): [3], (3, "h"): [2], (2, "e"): [4], (4, "n"): [1], }, start=0)),
            (G["else"], NFA(5, [0], {(2, "e"): [3], (3, "l"): [1], (1, "s"): [4], (4, "e"): [0], }, start=2)),
            (G["fi"], NFA(3, [2], {(1, "f"): [0], (0, "i"): [2], }, start=1)),
            (G["while"], NFA(6, [0], {(1, "w"): [2], (2, "h"): [3], (3, "i"): [4], (4, "l"): [5], (5, "e"): [0], }, start=1)),
            (G["loop"], NFA(5, [2], {(0, "l"): [3], (3, "o"): [4], (4, "o"): [1], (1, "p"): [2], }, start=0)),
            (G["pool"], NFA(5, [2], {(3, "p"): [4], (4, "o"): [0], (0, "o"): [1], (1, "l"): [2], }, start=3)),
            (G["let"], NFA(4, [2], {(1, "l"): [3], (3, "e"): [0], (0, "t"): [2], }, start=1)),
            (G["in"], NFA(3, [2], {(1, "i"): [0], (0, "n"): [2], }, start=1)),
            (G["case"], NFA(5, [4], {(0, "c"): [1], (1, "a"): [2], (2, "s"): [3], (3, "e"): [4], }, start=0)),
            (G["esac"], NFA(5, [0], {(1, "e"): [3], (3, "s"): [4], (4, "a"): [2], (2, "c"): [0], }, start=1)),
            (G["of"], NFA(3, [1], {(2, "o"): [0], (0, "f"): [1], }, start=2)),
            (G["new"], NFA(4, [3], {(0, "n"): [1], (1, "e"): [2], (2, "w"): [3], }, start=0)),
            (G["isvoid"], NFA(7, [2], {(4, "i"): [1], (1, "s"): [6], (6, "v"): [5], (5, "o"): [3], (3, "i"): [0], (0, "d"): [2], }, start=4)),
            (G["true"], NFA(5, [4], {(0, "t"): [1], (1, "r"): [2], (2, "u"): [3], (3, "e"): [4], }, start=0)),
            (G["false"], NFA(6, [5], {(1, "f"): [3], (3, "a"): [0], (0, "l"): [2], (2, "s"): [4], (4, "e"): [5], }, start=1)),
            (G["end"], NFA(4, [2], {(1, "e"): [3], (3, "n"): [0], (0, "d"): [2], }, start=1)),
            (G["space"], NFA(2, [1], {(0, " "): [1], (1, " "): [1], }, start=0)),
            (G["newline"], NFA(2, [1], {(0, "\n"): [1], (1, "\n"): [1], }, start=0)),
            (G["tab"], NFA(2, [1], {(0, "\t"): [1], (1, "\t"): [1], }, start=0)),
            (G["integer"], NFA(3, [1], {(2, "2"): [1], (2, "6"): [1], (2, "8"): [1], (2, "9"): [1], (2, "4"): [1], (2, "-"): [0], (2, "3"): [1], (2, "1"): [1], (2, "7"): [1], (2, "5"): [1], (1, "2"): [1], (1, "6"): [1], (1, "8"): [1], (1, "9"): [1], (1, "4"): [1], (1, "0"): [1], (1, "3"): [1], (1, "1"): [1], (1, "7"): [1], (1, "5"): [1], (0, "2"): [1], (0, "6"): [1], (0, "8"): [1], (0, "9"): [1], (0, "4"): [1], (0, "3"): [1], (0, "1"): [1], (0, "7"): [1], (0, "5"): [1], }, start=2)),
            (G["type"], NFA(2, [0], {(1, "C"): [0], (1, "L"): [0], (1, "T"): [0], (1, "O"): [0], (1, "V"): [0], (1, "Q"): [0], (1, "I"): [0], (1, "Z"): [0], (1, "H"): [0], (1, "P"): [0], (1, "G"): [0], (1, "A"): [0], (1, "W"): [0], (1, "X"): [0], (1, "M"): [0], (1, "B"): [0], (1, "S"): [0], (1, "E"): [0], (1, "U"): [0], (1, "N"): [0], (1, "R"): [0], (1, "Y"): [0], (1, "K"): [0], (1, "F"): [0], (1, "D"): [0], (1, "J"): [0], (0, "C"): [0], (0, "L"): [0], (0, "T"): [0], (0, "O"): [0], (0, "V"): [0], (0, "d"): [0], (0, "Q"): [0], (0, "y"): [0], (0, "h"): [0], (0, "I"): [0], (0, "t"): [0], (0, "Z"): [0], (0, "a"): [0], (0, "w"): [0], (0, "H"): [0], (0, "z"): [0], (0, "i"): [0], (0, "c"): [0], (0, "8"): [0], (0, "P"): [0], (0, "G"): [0], (0, "q"): [0], (0, "A"): [0], (0, "W"): [0], (0, "n"): [0], (0, "1"): [0], (0, "X"): [0], (0, "2"): [0], (0, "u"): [0], (0, "M"): [0], (0, "B"): [0], (0, "f"): [0], (0, "k"): [0], (0, "4"): [0], (0, "m"): [0], (0, "S"): [0], (0, "E"): [0], (0, "U"): [0], (0, "p"): [0], (0, "N"): [0], (0, "9"): [0], (0, "l"): [0], (0, "R"): [0], (0, "r"): [0], (0, "6"): [0], (0, "e"): [0], (0, "j"): [0], (0, "g"): [0], (0, "o"): [0], (0, "Y"): [0], (0, "b"): [0], (0, "v"): [0], (0, "x"): [0], (0, "K"): [0], (0, "0"): [0], (0, "s"): [0], (0, "3"): [0], (0, "F"): [0], (0, "D"): [0], (0, "J"): [0], (0, "7"): [0], (0, "5"): [0], }, start=1)),
            (G["id"], NFA(2, [0], {(1, "d"): [0], (1, "y"): [0], (1, "h"): [0], (1, "t"): [0], (1, "a"): [0], (1, "w"): [0], (1, "z"): [0], (1, "i"): [0], (1, "c"): [0], (1, "q"): [0], (1, "n"): [0], (1, "u"): [0], (1, "f"): [0], (1, "k"): [0], (1, "m"): [0], (1, "p"): [0], (1, "l"): [0], (1, "r"): [0], (1, "e"): [0], (1, "j"): [0], (1, "g"): [0], (1, "o"): [0], (1, "b"): [0], (1, "v"): [0], (1, "x"): [0], (1, "s"): [0], (0, "C"): [0], (0, "L"): [0], (0, "T"): [0], (0, "O"): [0], (0, "V"): [0], (0, "d"): [0], (0, "Q"): [0], (0, "y"): [0], (0, "h"): [0], (0, "t"): [0], (0, "I"): [0], (0, "Z"): [0], (0, "a"): [0], (0, "w"): [0], (0, "H"): [0], (0, "z"): [0], (0, "i"): [0], (0, "c"): [0], (0, "8"): [0], (0, "P"): [0], (0, "G"): [0], (0, "q"): [0], (0, "A"): [0], (0, "W"): [0], (0, "n"): [0], (0, "1"): [0], (0, "X"): [0], (0, "2"): [0], (0, "u"): [0], (0, "M"): [0], (0, "B"): [0], (0, "f"): [0], (0, "k"): [0], (0, "4"): [0], (0, "m"): [0], (0, "S"): [0], (0, "E"): [0], (0, "p"): [0], (0, "U"): [0], (0, "N"): [0], (0, "9"): [0], (0, "l"): [0], (0, "R"): [0], (0, "r"): [0], (0, "6"): [0], (0, "e"): [0], (0, "j"): [0], (0, "g"): [0], (0, "o"): [0], (0, "Y"): [0], (0, "b"): [0], (0, "v"): [0], (0, "x"): [0], (0, "K"): [0], (0, "0"): [0], (0, "s"): [0], (0, "3"): [0], (0, "F"): [0], (0, "D"): [0], (0, "J"): [0], (0, "7"): [0], (0, "5"): [0], }, start=1)),
            (G["string"], NFA(3, [2], {(0, "\""): [1], (1, "C"): [1], (1, "%"): [1], (1, "T"): [1], (1, "V"): [1], (1, "Z"): [1], (1, "H"): [1], (1, "?"): [1], (1, "P"): [1], (1, "G"): [1], (1, "q"): [1], (1, "&"): [1], (1, "("): [1], (1, "2"): [1], (1, "M"): [1], (1, "B"): [1], (1, "f"): [1], (1, "k"): [1], (1, "m"): [1], (1, "}"): [1], (1, "E"): [1], (1, "9"): [1], (1, ">"): [1], (1, "j"): [1], (1, "s"): [1], (1, "`"): [1], (1, "'"): [1], (1, "5"): [1], (1, "O"): [1], (1, "d"): [1], (1, "."): [1], (1, "h"): [1], (1, "I"): [1], (1, "a"): [1], (1, ":"): [1], (1, "{"): [1], (1, "i"): [1], (1, "<"): [1], (1, "/"): [1], (1, "W"): [1], (1, "u"): [1], (1, ","): [1], (1, ";"): [1], (1, "]"): [1], (1, "l"): [1], (1, "R"): [1], (1, "6"): [1], (1, "o"): [1], (1, "\\"): [1], (1, ")"): [1], (1, "x"): [1], (1, "@"): [1], (1, "D"): [1], (1, "7"): [1], (1, "|"): [1], (1, "Q"): [1], (1, "#"): [1], (1, "z"): [1], (1, "8"): [1], (1, "A"): [1], (1, "n"): [1], (1, "X"): [1], (1, "S"): [1], (1, "\""): [2], (1, "="): [1], (1, "+"): [1], (1, "g"): [1], (1, "Y"): [1], (1, "b"): [1], (1, "v"): [1], (1, "_"): [1], (1, "3"): [1], (1, "L"): [1], (1, "y"): [1], (1, "t"): [1], (1, "w"): [1], (1, "c"): [1], (1, "*"): [1], (1, " "): [1], (1, "$"): [1], (1, "1"): [1], (1, "!"): [1], (1, "4"): [1], (1, "^"): [1], (1, "U"): [1], (1, "p"): [1], (1, "N"): [1], (1, "r"): [1], (1, "e"): [1], (1, "["): [1], (1, "~"): [1], (1, "-"): [1], (1, "0"): [1], (1, "K"): [1], (1, "F"): [1], (1, "J"): [1], (2, "C"): [1], (2, "%"): [1], (2, "T"): [1], (2, "V"): [1], (2, "Z"): [1], (2, "H"): [1], (2, "?"): [1], (2, "P"): [1], (2, "G"): [1], (2, "q"): [1], (2, "&"): [1], (2, "("): [1], (2, "2"): [1], (2, "M"): [1], (2, "B"): [1], (2, "f"): [1], (2, "k"): [1], (2, "m"): [1], (2, "}"): [1], (2, "E"): [1], (2, "9"): [1], (2, ">"): [1], (2, "j"): [1], (2, "s"): [1], (2, "`"): [1], (2, "'"): [1], (2, "5"): [1], (2, "O"): [1], (2, "d"): [1], (2, "."): [1], (2, "h"): [1], (2, "I"): [1], (2, "a"): [1], (2, ":"): [1], (2, "{"): [1], (2, "i"): [1], (2, "<"): [1], (2, "/"): [1], (2, "W"): [1], (2, "u"): [1], (2, ","): [1], (2, ";"): [1], (2, "]"): [1], (2, "l"): [1], (2, "R"): [1], (2, "6"): [1], (2, "o"): [1], (2, "\\"): [1], (2, ")"): [1], (2, "x"): [1], (2, "@"): [1], (2, "D"): [1], (2, "7"): [1], (2, "|"): [1], (2, "Q"): [1], (2, "#"): [1], (2, "z"): [1], (2, "8"): [1], (2, "A"): [1], (2, "n"): [1], (2, "X"): [1], (2, "S"): [1], (2, "\""): [2], (2, "="): [1], (2, "+"): [1], (2, "g"): [1], (2, "Y"): [1], (2, "b"): [1], (2, "v"): [1], (2, "_"): [1], (2, "3"): [1], (2, "L"): [1], (2, "y"): [1], (2, "t"): [1], (2, "w"): [1], (2, "c"): [1], (2, "*"): [1], (2, " "): [1], (2, "$"): [1], (2, "1"): [1], (2, "!"): [1], (2, "4"): [1], (2, "^"): [1], (2, "U"): [1], (2, "p"): [1], (2, "N"): [1], (2, "r"): [1], (2, "e"): [1], (2, "["): [1], (2, "~"): [1], (2, "-"): [1], (2, "0"): [1], (2, "K"): [1], (2, "F"): [1], (2, "J"): [1], }, start=0)),
        ]

    def _build_regexs(self, table):
        regexs = []
        for n, (token_type, nfa) in enumerate(self.__table()):
            automaton, states = State.from_nfa(nfa, get_states=True)

            for state in states:
                if state.final:
                    state.tag = (n, token_type)

            regexs.append(automaton)

        return regexs
